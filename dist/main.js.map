{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAGA,MAAM,2BAAK,GAAG,CAAC,GAAW,GAAe;IACrC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC;IACpB,MAAM,UAAU,wFACyE,AAAC;IAE1F,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,AAAC;IACnC,OAAO,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,OAAO,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;CAC7D,AAAC;AAEF,MAAM,4BAAM,GAAG,CAAI,IAAc,GAAuB;IACpD,MAAM,KAAK,4HACkH,AAAC;IAC9H,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,AAAC;IAEjD,IAAI,QAAQ,EAAE;QACV,MAAM,GAAG,GAAG,IAAI,CAAA,GAAA,cAAG,CAAA,CAAC,QAAQ,CAAC,AAAC;QAE9B,OAAO;YACH,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,GAAG,EAAE,GAAG,CAAC,QAAQ;YACjB,OAAO,EAAE,GAAG,CAAC,MAAM;YACnB,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC;SAC/C,CAAC;KACL;IAED,OAAO,IAAI,CAAC;CACf,AAAC;AAEK,MAAM,yCAAY,GAAG,CAAI,OAAe,GAAU;IACrD,MAAM,IAAI,GAAG,2BAAK,CAAC,OAAO,CAAC,AAAC;IAC5B,MAAM,MAAM,GAAG,4BAAM,CAAC,IAAI,CAAC,AAAC;IAE5B,OAAO;QAAC,GAAG,MAAM;QAAE,MAAM,EAAE,KAAK;KAAC,CAAC;CACrC,AAAC;;ADpCF;;","sources":["src/index.ts","src/curl-parser.ts","src/interface.ts"],"sourcesContent":["export * from \"./curl-parser\";\nexport * from \"./interface\";\n","import {URL} from 'url'\nimport {UrlObject} from \"./interface\";\n\nconst split = (str: string): string[] => {\n    if (!str) return [];\n    const argsRegexp =\n        /\\s*(?:([^\\s\\\\\\'\\\"]+)|'((?:[^\\'\\\\]|\\\\.)*)'|\"((?:[^\\\"\\\\]|\\\\.)*)\"|(\\\\.?)|(\\S))(\\s|$)?/g;\n\n    const args = str.match(argsRegexp);\n    return args?.map((i) => i.trim().replace(/'/g, \"\")) || [];\n};\n\nconst getUrl = <D>(args: string[]): UrlObject | null => {\n    const regex =\n        /^(ftp|http|https)?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$/g;\n    const foundUrl = args.find((a) => regex.test(a));\n\n    if (foundUrl) {\n        const obj = new URL(foundUrl);\n\n        return {\n            href: obj.href,\n            url: obj.pathname,\n            baseURL: obj.origin,\n            params: Object.fromEntries(obj.searchParams),\n        };\n    }\n\n    return null;\n};\n\nexport const curlToObject = <D>(curlStr: string): any => {\n    const args = split(curlStr);\n    const urlObj = getUrl(args);\n\n    return {...urlObj, method: \"GET\"};\n};\n","export type HeaderTitle =\n  | \"User-Agent\"\n  | \"Accept\"\n  | \"Accept-Encoding\"\n  | \"Accept-Language\"\n  | \"Cache-Control\"\n  | \"Connection\"\n  | \"Content-Length\"\n  | \"Content-Type\"\n  | \"Cookie\"\n  | \"Host\"\n  | \"Origin\"\n  | \"Referer\"\n  | \"Upgrade-Insecure-Requests\"\n  | \"X-Requested-With\";\n\nexport type Method =\n  | \"GET\"\n  | \"DELETE\"\n  | \"HEAD\"\n  | \"OPTIONS\"\n  | \"POST\"\n  | \"PUT\"\n  | \"PATCH\"\n  | \"PURGE\"\n  | \"LINK\"\n  | \"UNLINK\";\n\nexport type Headers = Record<HeaderTitle | string, string>;\n\nexport interface ICredentials {\n  username: string;\n  password: string;\n}\n\nexport interface IProxy {\n  host: string;\n  port: number;\n  auth?: {\n    username: string;\n    password: string;\n  };\n  protocol?: string;\n}\n\nexport type UrlObject = {\n  href?: string;\n  url?: string;\n  baseURL?: string;\n  params?: { [k: string]: any };\n};\n\nexport type RequestObject<D> = {\n  method?: Method;\n  headers?: Headers;\n  data?: D;\n  timeout?: number;\n  auth?: ICredentials;\n  proxy?: IProxy | false;\n};\n\nexport type Output<D, P> = RequestObject<D> & UrlObject;\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}